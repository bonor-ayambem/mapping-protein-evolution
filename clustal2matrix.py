import sys
import getopt
import string
import os
import re
import glob
import array

###########################################################################
### Credit
###########################################################################
def credit():
        print("Clustal Matrix Generation script, Brian Chen, Lehigh University, 2011.")

###########################################################################
### Usage
###########################################################################
def usage():
        credit();
        print("========================================================="   );
        print(""                                                          );
        print("python seqDistanceClustering.py"        );
        print("   Running with no input returns this usage info."  );
        print(""                                                          );
        print("python clustalMatrixGenerator.py [clustalOutput] [matrixFile]"       );
        print("   Parses the the stdout generated by clustalW, [clustalOutput], to "  );
        print("   generate a matrix of sequence identities, [matrixFile].");
        print(""                                                          );
        print("USAGE NOTE:"                                               );
        print(" When using this script, names must be 10 characters or less");
        print(" Otherwise Phylip cannot parse them correctly");
        print(" Names that are too long will be truncated");
        print("========================================================="   );

###########################################################################
### functions
###########################################################################



###########################################################################
### This parses a line of the following type:
### "Sequences (1:2) Aligned. Score:  100"
### and returns the Score, in this case "100".
###########################################################################
def getAlnScore(line):
        lineList = line.split();
        if( len(lineList) != 5 or lineList[0] != "Sequences" ):
                print( "ERROR: this line [" + line + "] is not a Sequence Pair Line" );
                print( "Which should look like this:" );
                print( "Sequences (1:2) Aligned. Score:  100" );
                raise SystemExit(5);

        return 1.0 - float(line.split()[-1])/100.0 ;


###########################################################################
### This parses a line of the following type:
### "Sequences (1:2) Aligned. Score:  100"
### and returns the second  sequence ID, in this case "2".
###########################################################################
def getSecondSeqId(line):
        lineList = line.split();
        if( len(lineList) != 5 or lineList[0] != "Sequences" ):
                print( "ERROR: this line [" + line + "] is not a Sequence Pair Line" );
                print( "Which should look like this:" );
                print( "Sequences (1:2) Aligned. Score:  100" );
                raise SystemExit(5);

        return int(line.split()[1].split(':')[1][0:-1]);



###########################################################################
### This parses a line of the following type:
### "Sequences (1:2) Aligned. Score:  100"
### and returns the first sequence ID, in this case "1".
###########################################################################
def getFirstSeqId(line):
        lineList = line.split();
        if( len(lineList) != 5 or lineList[0] != "Sequences" ):
                print( "ERROR: this line [" + line + "] is not a Sequence Pair Line" );
                print( "Which should look like this:" );
                print( "Sequences (1:2) Aligned. Score:  100" );
                raise SystemExit(5);

        return int(line.split()[1].split(':')[0][1::]);





###########################################################################
### This parses a line of the following type:
### "Sequence 3: 3PJ6_A|PDBID|CHAIN|SEQUENCE       99 aa"
### and returns the sequence name, in this case "3PJ6_A|PDBID|CHAIN|SEQUENCE".
###########################################################################
def getSequenceName(line):
        lineList = line.split();

        if( len(lineList) != 5 or lineList[-1] != "aa" ):
                print( "ERROR: this line [" + line + "] is not a sequence Number Line" );
                raise SystemExit(5);

        return lineList[2];




###########################################################################
### This parses a line of the following type:
### "Sequence 3: 3PJ6_A|PDBID|CHAIN|SEQUENCE       99 aa"
### and returns the sequence number, in this case 3.
###########################################################################
def getSequenceNumber(line):
        lineList = line.split();

        if( len(lineList) != 5 or lineList[-1] != "aa" ):
                print( "ERROR: this line [" + line + "] is not a sequence Number Line" );
                raise SystemExit(5);

        return int(lineList[1][0:-1]);



###########################################################################
### This takes a taxa name and makes it exactly 10 characters
###########################################################################
def taxaNameProcessing(name):
        if(len(name) == 0):
                print("ERR: no name found! exitting!");
                raise SystemExit(5);

        if(len(name) == 10):
                return name;
        if(len(name) > 10):
                return name[0:10];
        if(len(name) == 1):
                return name + "         ";
        if(len(name) == 2):
                return name + "        ";
        if(len(name) == 3):
                return name + "       ";
        if(len(name) == 4):
                return name + "      ";
        if(len(name) == 5):
                return name + "     ";
        if(len(name) == 6):
                return name + "    ";
        if(len(name) == 7):
                return name + "   ";
        if(len(name) == 8):
                return name + "  ";
        if(len(name) == 9):
                return name + " ";



###########################################################################
### This reads the sequence names and their numbers
### then gets all the pairwise scores
### and outputs a matrix
###########################################################################
def processDists(clustalOutput, matrixFile):
        scoresFile = open(clustalOutput, 'rt');
        line = scoresFile.readline();

#       numList = [];
        nameList = [];

        print("Parseing Data File");

        ##skip to the sequence names and indices
        while line:
                if line.startswith("Sequence format is Pearson"):
                        line = scoresFile.readline();
                        break;
                line = scoresFile.readline();

        ##read and store the sequence names and indices
        while line:
                if line.startswith("Start of Pairwise alignments"):
                        line = scoresFile.readline();
                        continue;
                if line.startswith("Aligning..."):
                        line = scoresFile.readline();
                        break;

                if line.startswith("Sequence"):
#                       seqNum = getSequenceNumber(line);
#                       numList.append(seqNum);
                        seqName = getSequenceName(line);
                        nameList.append(seqName);

                line = scoresFile.readline();


        ##set up the storage datastructure
        matrix = [None] * len(nameList);
        for i in range(len(nameList)):
                matrix[i] = [None] * len(nameList);

#       matrix = [len(nameList)];
#       print("SIZE: " + str(len(nameList)) );
#       for i in range(len(nameList)):
#               print("i: " + str(i));
#               matrix[i] = [len(nameList)];

        ##now parse out the scores and put them in the matrix
        while line:
                lineList = line.split();
                if( len(lineList) == 0):
                        line = scoresFile.readline();
                        continue;

                if( len(lineList) != 5 or lineList[0] != "Sequences" ):
                        break;

                seqNum1 = getFirstSeqId(line);
                seqNum2 = getSecondSeqId(line);
                score = getAlnScore(line);

                print("Got Seq1: [" + str(seqNum1) + "] Got Seq2: [" + str(seqNum2) + "] got Score: [" + str(score) + "]");

                #I'm a sucker for symmetry
                matrix[seqNum1-1][seqNum2-1] = score;
                matrix[seqNum2-1][seqNum1-1] = score;
                line = scoresFile.readline();

        ##Finally output the score matrix.
        ### first the size
        outputFile = open(matrixFile, 'wt');
        outputFile.write( "   " + str(len(nameList)) + "\n" );

        ### Now the output values
        for i in range(len(nameList)):
                lineOutput = taxaNameProcessing(nameList[i]) + " ";
                for j in range(i):
                        lineOutput += str(matrix[i][j]);
                        lineOutput += "  ";

                lineOutput += "\n";
                outputFile.write( lineOutput );

        ##done
        outputFile.close();


###########################################################################
###########################################################################
### Main Method
###########################################################################
###########################################################################
def main():

#       testDebug();

        ################################################ Usage Statement
        if len(sys.argv) == 1:
                usage()
                raise SystemExit(5)

        ################################################ Help Statement
        if len(sys.argv) == 3:

                clustalOutput = sys.argv[1];
                matrixFile = sys.argv[2];

                processDists(clustalOutput, matrixFile);

                raise SystemExit(5)
        ################################################

if __name__ == "__main__":
        main()
